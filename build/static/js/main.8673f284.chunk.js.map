{"version":3,"sources":["components/SearchBar.js","apis/youtube.js","components/VideoItem.js","components/VideoList.js","components/VideoDetail.js","hooks/useVideos.js","components/App.js","index.js"],"names":["SearchBar","onFormSubmit","useState","term","setTerm","className","onSubmit","event","preventDefault","type","value","onChange","target","axios","create","baseURL","params","part","maxResults","key","VideoItem","video","onVideoSelect","onClick","src","snippet","thumbnails","medium","url","alt","title","VideoList","videos","renderedlist","map","id","videoId","VideoDetail","videoSrc","description","useVideos","defaultSearchTerm","setVideos","useEffect","search","a","youtube","get","q","response","data","items","App","selectedVideo","setSelectedVideo","ReactDOM","render","document","querySelector"],"mappings":"uKAqCeA,EAnCG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EACdC,mBAAS,IADK,mBAC/BC,EAD+B,KACzBC,EADyB,KAiBtC,OACE,qBAAKC,UAAU,wBAAf,SACE,sBAAMC,SAVO,SAACC,GAChBA,EAAMC,iBAENP,EAAaE,IAOeE,UAAU,UAApC,SACE,sBAAKA,UAAU,QAAf,UACE,kDACA,uBACEI,KAAK,OACLC,MAAOP,EAEPQ,SAAU,SAACJ,GAAD,OAAWH,EAAQG,EAAMK,OAAOF,kB,QCxBvCG,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,wCACTC,OAAQ,CACNC,KAAM,UACNR,KAAM,QACNS,WAAY,EACZC,IARQ,6CCmBGC,G,MAlBG,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAC1B,OACE,sBAAKC,QAAS,kBAAMD,EAAcD,IAAQhB,UAAU,kBAApD,UACE,qBACEA,UAAU,WACVmB,IAAKH,EAAMI,QAAQC,WAAWC,OAAOC,IACrCC,IAAKR,EAAMI,QAAQK,QACrB,qBAAKzB,UAAU,UAAf,SACE,qBAAKA,UAAU,SAAf,SACGgB,EAAMI,QAAQK,eCEVC,EAXG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAAQV,EAAoB,EAApBA,cACrBW,EAAeD,EAAOE,KAAI,SAAAb,GAC9B,OAAO,cAAC,EAAD,CAELC,cAAeA,EACfD,MAAOA,GAFFA,EAAMc,GAAGC,YAKlB,OAAO,qBAAK/B,UAAU,0BAAf,SAA0C4B,KCUpCI,EAnBK,SAAC,GAAe,IAAbhB,EAAY,EAAZA,MACrB,IAAKA,EACH,OAAO,6CAGT,IAAMiB,EAAQ,wCAAoCjB,EAAMc,GAAGC,SAC3D,OACE,gCACE,qBAAK/B,UAAU,WAAf,SACE,wBAAQyB,MAAM,eAAeN,IAAKc,MAEpC,sBAAKjC,UAAU,aAAf,UACE,oBAAIA,UAAU,YAAd,SAA2BgB,EAAMI,QAAQK,QACzC,4BAAIT,EAAMI,QAAQc,qB,wBCOXC,EAnBG,SAACC,GAAuB,IAAD,EACXvC,mBAAS,IADE,mBAChC8B,EADgC,KACxBU,EADwB,KAGvCC,qBAAU,WACRC,EAAOH,KACN,CAACA,IAEJ,IAAMG,EAAM,uCAAG,WAAMzC,GAAN,eAAA0C,EAAA,sEACUC,EAAQC,IAAI,UAAW,CAC5C/B,OAAQ,CACNgC,EAAG7C,KAHM,OACP8C,EADO,OAObP,EAAUO,EAASC,KAAKC,OAPX,2CAAH,sDASZ,MAAO,CAAEnB,EAAQY,ICyBJQ,EArCH,WAAO,IAAD,EAC0BlD,mBAAS,MADnC,mBACTmD,EADS,KACMC,EADN,OAESd,EAAU,aAFnB,mBAETR,EAFS,KAEDY,EAFC,KAgBhB,OAZAD,qBAAU,WACRW,EAAiBtB,EAAO,MACvB,CAACA,IAWF,sBAAK3B,UAAU,eAAf,UACE,cAAC,EAAD,CAAWJ,aAAc2C,IACzB,qBAAKvC,UAAU,UAAf,SACE,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,kBAAf,SACE,cAAC,EAAD,CAAagB,MAAOgC,MAEtB,qBAAKhD,UAAU,kBAAf,SACE,cAAC,EAAD,CAEEiB,cAAegC,EACftB,OAAQA,eC/BtBuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,cAAc,Y","file":"static/js/main.8673f284.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst SearchBar = ({ onFormSubmit }) => {\n  const [term, setTerm] = useState('')\n\n\n\n  // const onInputChange = (event) => {// move this longer functionality to an inline function(29)\n  //   setTerm(event.target.value)\n  // }\n\n  const onSubmit = (event) => {\n    event.preventDefault()\n    \n    onFormSubmit(term)\n\n    //TODO: Make sure we call callback from parent\n  }\n\n  return (\n    <div className=\"search-bar ui segment\">\n      <form onSubmit={onSubmit} className=\"ui form\">\n        <div className=\"field\">\n          <label>Video Search </label>\n          <input\n            type=\"text\"\n            value={term}\n            // onChange={onInputChange} \n            onChange={(event) => setTerm(event.target.value)}\n            />\n        </div>\n      </form>\n    </div>\n  )\n}\n\n\nexport default SearchBar","import axios from 'axios'\n\nconst KEY = 'AIzaSyBJH-lR9hM72ufkk4RAxTxyAC2mHVrIyoA'\n\nexport default axios.create({\n  baseURL: 'https://www.googleapis.com/youtube/v3',\n  params: {\n    part: 'snippet',\n    type: 'video',\n    maxResults: 5,\n    key: KEY\n  }\n})","import './VideoItem.css'\nimport React from 'react'\n\nconst VideoItem = ({ video, onVideoSelect }) => {\n  return (\n    <div onClick={() => onVideoSelect(video)} className=\"video-item item\">\n      <img\n        className=\"ui image\"\n        src={video.snippet.thumbnails.medium.url}\n        alt={video.snippet.title} />\n      <div className=\"content\">\n        <div className=\"header\">\n          {video.snippet.title}\n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default VideoItem","import React from 'react'\nimport VideoItem from './VideoItem'\n\nconst VideoList = ({ videos, onVideoSelect }) => {\n  const renderedlist = videos.map(video => {\n    return <VideoItem\n      key={video.id.videoId}\n      onVideoSelect={onVideoSelect}\n      video={video} />\n  })\n\n  return <div className=\"ui relaxed divided list\">{renderedlist}</div>\n}\n\nexport default VideoList","import React from 'react'\n\nconst VideoDetail = ({ video }) => {\n  if (!video) {\n    return <div>Loading...</div>\n  }\n\n  const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\n  return (\n    <div>\n      <div className=\"ui embed\">\n        <iframe title=\"video player\" src={videoSrc} />\n      </div>\n      <div className=\"ui segment\">\n        <h4 className=\"ui header\">{video.snippet.title}</h4>\n        <p>{video.snippet.description}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default VideoDetail","import { useState, useEffect } from 'react'\nimport youtube from '../apis/youtube'\n\nconst useVideos = (defaultSearchTerm) => {\n  const [videos, setVideos] = useState([])\n\n  useEffect(() => {\n    search(defaultSearchTerm)\n  }, [defaultSearchTerm])\n\n  const search = async term => {\n    const response = await youtube.get('/search', {\n      params: {\n        q: term,\n      }\n    })\n\n    setVideos(response.data.items)\n  }\n  return [ videos, search ] \n}\n\nexport default useVideos","import React, { useState, useEffect } from 'react';\nimport SearchBar from './SearchBar'\nimport youtube from '../apis/youtube'\nimport VideoList from './VideoList'\nimport VideoDetail from './VideoDetail'\nimport useVideos from '../hooks/useVideos'\n\nconst App = () => {\n  const [selectedVideo, setSelectedVideo] = useState(null)\n  const [videos, search] = useVideos('buildings')\n\n  useEffect(() => {\n    setSelectedVideo(videos[0])\n  }, [videos])\n\n  //    setSelectedVideo(response.data.items[0])\n\n\n\n  // const onVideoSelect = (video) => { //moved to inline function\n  //   setSelectedVideo(video)\n  // }\n\n  return (\n    <div className=\"ui container\">\n      <SearchBar onFormSubmit={search} />\n      <div className=\"ui grid\">\n        <div className=\"ui row\">\n          <div className=\"ten wide column\">\n            <VideoDetail video={selectedVideo} />\n          </div>\n          <div className=\"six wide column\">\n            <VideoList\n              // onVideoSelect={(video) => setSelectedVideo(video)}// or even better:\n              onVideoSelect={setSelectedVideo}\n              videos={videos}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n\n// onTermSubmit = (term) => {\n//   youtube.get(\"/search\", {\n//     params: {\n//       q: term,\n//       part: \"snippet\",\n//       type: 'video',\n//       maxResults: 5,\n//       key: KEY\n//     }\n//   })\n// }\n// So says the custom hook: \"If you give me a default search term, I will give you a video and a list of videos.\"\n// 1. Identify each line of code related to some single purpose\n// 2. Identify the inputs to that code\n// 3. Identify the outputs to that code\n// 4. Extract all of the code into a separate function, receiving the inputs as arguments, and returning the outputs.","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <App />,\n  document.querySelector('#root')\n)"],"sourceRoot":""}